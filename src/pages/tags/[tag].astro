---
import BaseLayout from "../../layouts/BaseLayout.astro";

import BlogPost from "../../components/BlogPosts.astro";

// create dynamic page routes  for each tag to be created using the template below

export async function getStaticPaths() {

    // make data from blog posts available to each page route
  const allPosts = await Astro.glob("../posts/*.md");

  // define tags params (what to call the page) to create pages for and pass in the props data from allPosts

  // dynamic approach:
  // It goes through each Markdown post, one-by-one, and combines each array of tags into one single larger array. Then, it makes a new Set from all the individual tags it found (to ignore repeated values). Finally, it turns that set into an array (with no duplications), that you can use to show a list of tags on your page.
  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
        params: { tag },
        props: { posts: filteredPosts },
    }
  });

// -----------------------------------------------------------------------
  // static approach: (needs to be updated for every new tag)
  //     return [
  //     { params: { tag: "astro" }, props: { posts: allPosts } },
  //     { params: { tag: "successes" }, props: { posts: allPosts } },
  //     { params: { tag: "community" }, props: { posts: allPosts } },
  //     { params: { tag: "blogging" }, props: { posts: allPosts } },
  //     { params: { tag: "setbacks" }, props: { posts: allPosts } },
  //     { params: { tag: "learning in public" }, props: { posts: allPosts } },
  //   ];
// -----------------------------------------------------------------------

}

// pass in data from params and props
const { tag } = Astro.params;
const { posts } = Astro.props;

// -----------------------------------------------------------------------
// filter your list of posts to only include posts that contain the pageâ€™s own tag (only needed for static approach):

// const filteredPosts = posts.filter((post) =>
//   post.frontmatter.tags.includes(tag)
// );
// -----------------------------------------------------------------------

---

<BaseLayout pageTitle={tag}>
  <p>Posts tagged with [{tag}]:</p>

  <!-- Map filtered post to recycled BlogPost Component ðŸ’ª -->
  <ul>
    {
      posts.map((post) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
